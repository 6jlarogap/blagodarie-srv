# Generated by Django 3.2.6 on 2022-10-03 18:10

from django.db import migrations, connection

# Функция postgres поиска по родственным связям среди массива id и вовне этих id's
#
# Attribution:
# https://www.alibabacloud.com/blog/applying-postgresql-graph-database-to-social-scenarios_595035

def reverse_it(apps, schema_editor):
    pass


def operation(apps, schema_editor):
    op = """
create or replace function find_group_genesis_tree(
    user_page_pks int[],
    v_level int
) returns setof template_tmp_links_paths as 
$$

-- Родственные связи внутри и вовне user_page_pks
--  v_level:
--      максимальное число итераций при проходе по дереву связей
--

declare 
    i int := 1;
begin 
    if v_level <= 0 then 
        raise notice 'level must >= 1'; 
        return; 
    end if; 
  
    create temp table if not exists tmp(like template_tmp_links_paths) ON COMMIT delete rows;
    create index if not exists idx_tmp_parent_1 on tmp(level);
    create index if not exists idx_tmp_parent_2 on tmp(user_from_id);
    create index if not exists idx_tmp_parent_3 on tmp(user_to_id);

    return query 
        insert into tmp
            select
                i,
                array[]::int[] || user_from_id || user_to_id,
                user_from_id,
                user_to_id
            from
                contact_currentstate
            where
                user_from_id = any(user_page_pks) and
                (
                    contact_currentstate.is_father or
                    contact_currentstate.is_mother
                ) and user_to_id is not null
    returning *;

    loop
        i := i+1; 

        -- All levels of data has been found
        if i > v_level then
            return;
        end if; 

        return query
            insert into tmp
                select
                    i,
                    tmp.path || contact_currentstate.user_to_id,
                    contact_currentstate.user_from_id,
                    contact_currentstate.user_to_id
                from
                    contact_currentstate
                join
                    (select user_to_id, path from tmp where level = i - 1)
                tmp on
                    (contact_currentstate.user_from_id = tmp.user_to_id)
                where
                    contact_currentstate.user_to_id is not null and (
                        contact_currentstate.is_father or
                        contact_currentstate.is_mother
                    ) and
                    not (contact_currentstate.user_from_id = any(user_page_pks))
        returning *; 
  end loop; 
end;

$$
    language plpgsql strict
"""

    print('\nCreate postgresql function for genesis links in a telegram group')
    with connection.cursor() as cursor:
        cursor.execute(op.strip())


class Migration(migrations.Migration):

    dependencies = [
        ('contact', '0078_data_order_in_pgsql_funcs'),
    ]

    operations = [
        migrations.RunPython(operation, reverse_it),
    ]
