# Generated by Django 3.2.6 on 2021-10-08 14:17

from django.db import migrations, connection

# Функция postgres поиска предков/потомков
#
# Пример:
# https://www.alibabacloud.com/blog/applying-postgresql-graph-database-to-social-scenarios_595035

def reverse_it(apps, schema_editor):
    pass

def operation(apps, schema_editor):
    sql = '''create or replace function find_rel_parent(v_user_from_id int, v_level int) returns setof template_tmp1 as 
$$

declare 
    i int := 1; 
begin 
    if v_level <= 0 then 
        raise notice 'level must >= 1'; 
        return; 
    end if; 
  
    -- Note: In version 9.6, frequent creation and deletion of inner temp tables
    -- may still cause garbage to be generated in catalog.  
    -- To temporarily store the relations at each level from the start point
    --
    create temp table if not exists tmp1(
        level int,
        user_from_id int,
        user_to_id int,
        thanks_count int,
        is_trust boolean,
        is_reverse boolean
    ) ON COMMIT delete rows;
    create index if not exists idx_tmp1_1 on tmp1(level);
    create index if not exists idx_tmp1_2 on tmp1(user_from_id);
    create index if not exists idx_tmp1_3 on tmp1(user_to_id);

    return query 
        insert into tmp1
            select
                i,
                user_from_id,
                user_to_id,
                thanks_count,
                is_trust,
                is_reverse
            from
                contact_currentstate
            where
                user_from_id=v_user_from_id and
                contact_currentstate.is_parent and
                user_to_id is not null
    returning *;

    loop
        i := i+1; 

        -- All levels of data has been found
        if i > v_level then
            return;
        end if; 

        -- The next level relation is derived though a join with level=i-1
        -- (Group By excludes duplicate nodes.
        -- For example, 3 in 1-2-3-4 and 1-5-3-4 is excluded),
        -- and the looping points are excluded by not exists.
        --
        return query 
            insert into tmp1
                select
                    i,
                    contact_currentstate.user_from_id,
                    contact_currentstate.user_to_id,
                    contact_currentstate.thanks_count,
                    contact_currentstate.is_trust,
                    contact_currentstate.is_reverse
                from
                    contact_currentstate
                join
                    (select user_to_id from tmp1 where level = i - 1 group by user_to_id)
                tmp on
                    (contact_currentstate.user_from_id = tmp.user_to_id)
                where
                    contact_currentstate.user_to_id is not null and
                    contact_currentstate.is_parent and
                    not exists (
                        select 1 from tmp1 where contact_currentstate.user_from_id = tmp1.user_from_id
                    )
        returning *;
  end loop; 
end;

$$
    language plpgsql strict
'''
    print('\nCreate or replace find_rel_parent function')
    with connection.cursor() as cursor:
        result = cursor.execute(sql)

class Migration(migrations.Migration):

    dependencies = [
        ('contact', '0055_currentstate_is_parent'),
    ]

    operations = [
        migrations.RunPython(operation, reverse_it),
    ]
