# Generated by Django 3.2.6 on 2022-09-23 15:10

from django.db import migrations, connection
from django.db.models.query_utils import Q
from django.db.models import Sum


def reverse_it(apps, schema_editor):
    pass


def operation(apps, schema_editor):
    ops = [
    'drop function if exists find_rel_mother_father(v_user_id integer, v_level integer)',
]
    print('\nRemove unused stuff in db')
    with connection.cursor() as cursor:
        cursor.execute('drop function if exists find_rel_mother_father(v_user_id integer, v_level integer)')

    print('\nPatch CurrentState table: make "user_to__isnull=False, is_reverse=True" recs reverse')
    CurrentState = apps.get_model('contact', 'CurrentState')
    n_patched = 0
    for cs in CurrentState.objects.filter(user_to__isnull=False, is_reverse=False, is_trust__isnull=True):
        reverse_cs, reverse_created = CurrentState.objects.get_or_create(
            user_from=cs.user_to,
            user_to=cs.user_from,
            defaults = dict(
                is_reverse=True,
                is_trust=None,
                is_father=cs.is_father,
                is_mother=cs.is_mother,
                is_child = not cs.is_child if cs.is_father or cs.is_mother else False,
        ))
        if not (reverse_cs.is_trust == None):
            print('    patched user_from_id', cs.user_from.pk, 'user_to_id', cs.user_to.pk)
            cs.is_reverse = True
            cs.is_trust = reverse_cs.is_trust
            cs.save()
            n_patched += 1
    print('    %s recs patched' % n_patched)
    
    print('\nPatch CurrentState table: remove unused reverse recs')
    n_patched = CurrentState.objects.filter(
        (Q(is_father=True) | Q(is_mother=True)) & Q(is_child=True, is_trust__isnull=True, is_reverse=True)
    ).update(is_reverse=False)
    print('    %s recs patched' % n_patched)

    print('\nPatch CurrentState table: recount thanks count')
    Journal = apps.get_model('contact', 'Journal')
    n_patched = 0
    for cs in CurrentState.objects.select_related('user_to').all():
        thanks_count = Journal.objects.filter(
            user_from=cs.user_from,
            user_to=cs.user_to,
            operationtype_id__in=(1, 5),
        ).distinct().count()
        if thanks_count != cs.thanks_count:
            cs.thanks_count = thanks_count
            cs.save(update_fields=('thanks_count',))
            n_patched += 1
    print('    %s recs patched' % n_patched)

    print('\nPatch Profile table: recount sum thanks count')
    Profile = apps.get_model('users', 'Profile')
    n_patched = 0
    for profile in Profile.objects.select_related('user').all():
        sum_thanks_count = CurrentState.objects.filter(
            user_to=profile.user,
        ).distinct().aggregate(Sum('thanks_count'))['thanks_count__sum'] or 0
        if sum_thanks_count != profile.sum_thanks_count:
            profile.sum_thanks_count = sum_thanks_count
            profile.save(update_fields=('sum_thanks_count',))
            n_patched += 1
    print('    %s recs patched' % n_patched)


class Migration(migrations.Migration):

    dependencies = [
        ('contact', '0076_auto_20220923_1510'),
    ]

    operations = [
        migrations.RunPython(operation, reverse_it),
    ]
